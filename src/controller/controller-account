const express = require("express");
const router = express.Router();
const UsecaseAccount = require("../flow/flow-account");

// Define routes
router.get("/account", getAccount); // Endpoint to get a specific account or all accounts
router.post("/account", addAccount); // Endpoint to add a new account
router.put("/account", updateAccount); // Endpoint to update an existing account
router.delete("/account/:id", deleteAccount); // Endpoint to delete a account by ID

// Get a specific account by ID or all accounts if no ID is provided
const getAccount = async (req, res) => {
  try {
    const { id } = req.query;
    if (id) {
      let account = await UsecaseAccount.getAccount(id);
      res.json(account);
    } else {
      let allAccounts = await UsecaseAccount.getAllAccounts();
      res.json(allAccounts);
    }
  } catch (error) {
    console.error(error);
    res.status(500).send("Server error");
  }
};

// Add a new account
const addAccount = async (req, res) => {
  try {
    const { id, customer_id, account_id, username, password, balance } =
      req.body; // Ensure you have a request body
    let result = await UsecaseAccount.addAccount(
      id,
      customer_id,
      account_id,
      username,
      password,
      balance
    );
    res
      .status(201)
      .json({ message: "Account added successfully", data: result });
  } catch (error) {
    console.error(error);
    res
      .status(error.isBoom ? error.output.statusCode : 500)
      .send(error.message || "Server error");
  }
};

// Update an existing account
const updateAccount = async (req, res) => {
  try {
    const { id, customer_id, account_id, username, password, balance } =
      req.body; // Ensure you have a request body
    let result = await UsecaseAccount.updateAccount(
      id,
      customer_id,
      account_id,
      username,
      password,
      balance
    );
    res.json({ message: "Account updated successfully", data: result });
  } catch (error) {
    console.error(error);
    res
      .status(error.isBoom ? error.output.statusCode : 500)
      .send(error.message || "Server error");
  }
};

// Delete a account by ID
const deleteAccount = async (req, res) => {
  try {
    const { id } = req.params; // Retrieve the parameter from the URL
    let result = await UsecaseAccount.deleteAccount(id);
    res.json({ message: "Account deleted successfully", data: result });
  } catch (error) {
    console.error(error);
    res
      .status(error.isBoom ? error.output.statusCode : 500)
      .send(error.message || "Server error");
  }
};

module.exports = router;
